project (FreeImage)

cmake_minimum_required(VERSION 2.8.0)

# FreeImage version
OPTION(FREEIMAGE_BUILD_ZLIB_DLL "If ON build Zlib as FreeImageZlib.dll. If OFF Zlib is staticly linked with FreeImage.dll.")
OPTION(FREEIMAGE_BUILD_JPEG_DLL "If ON build LibJPEG as FreeImageJPEG.dll. If OFF LibJPEG is staticly linked with FreeImage.dll.")
OPTION(FREEIMAGE_BUILD_PNG_DLL "If ON build LibPNG as FreeImagePNG.dll. If OFF LibPNG is staticly linked with FreeImage.dll.")
OPTION(FREEIMAGE_BUILD_TIFF_DLL "If ON build LibTIFF as FreeImageTIFF.dll. If OFF LibTIFF is staticly linked with FreeImage.dll.")
OPTION(FREEIMAGE_DYNAMIC_C_RUNTIME "If ON build FreeImage with dynamicly linked C/C++ runtime. If OFF FreeImage is staticly linked with C/C++ runtime.")

INCLUDE(${CMAKE_SOURCE_DIR}/../../cmake/SystemInfo.cmake)
INCLUDE(${CMAKE_SOURCE_DIR}/../../cmake/ConfigCompiler.cmake)
INCLUDE(${CMAKE_SOURCE_DIR}/../../cmake/Variables.cmake)

IF(MSVC)
	# Set C++14 because LibRawLite used auto_ptr.
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /WX- /std:c++14")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /WX- /std:c++14")
ENDIF()

IF(UNIX)
	SET(CMAKE_C_FLAGS "-fPIC -fvisibility=hidden -DNO_LCMS ${CMAKE_C_FLAGS} -fPIC")
	SET(CMAKE_CXX_FLAGS "-fPIC -fvisibility=hidden -Wno-ctor-dtor-privacy ${CMAKE_CXX_FLAGS} -fPIC")
ENDIF(UNIX)

SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/CMakeModules)

# Check parameters
INCLUDE(CheckIncludeFile)
INCLUDE(CheckIncludeFileCXX)
INCLUDE(CheckFunctionExists)
INCLUDE(CheckTypeSize)

# Set default output dirs
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

IF(NOT FREEIMAGE_BUILD_ZLIB_DLL)
  SET(FREEIMAGE_BUILD_ZLIB_STATIC ON)
ENDIF(NOT FREEIMAGE_BUILD_ZLIB_DLL)

IF(NOT FREEIMAGE_BUILD_JPEG_DLL)
  SET(FREEIMAGE_BUILD_JPEG_STATIC ON)
ENDIF(NOT FREEIMAGE_BUILD_JPEG_DLL)

IF(NOT FREEIMAGE_BUILD_PNG_DLL)
  SET(FREEIMAGE_BUILD_PNG_STATIC ON)
ENDIF(NOT FREEIMAGE_BUILD_PNG_DLL)

IF(NOT FREEIMAGE_BUILD_TIFF_DLL)
  SET(FREEIMAGE_BUILD_TIFF_STATIC ON)
ENDIF(NOT FREEIMAGE_BUILD_TIFF_DLL)

IF(NOT ZLIB_INCLUDE_DIR)
  SET(ZLIB_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/Source/ZLib)
ENDIF(NOT ZLIB_INCLUDE_DIR)

# Set libraries for static or DLL build
IF(FREEIMAGE_BUILD_STATIC)
	SET(FREEIMAGE_LIBRARIES FreeImage_s OpenEXR_s LibMNG_s LibOpenJPEG_s LibRawLite_s LibWebP_s Zlib_s LibJPEG_s LibPNG_s LibTIFF_s)
	SET(FREEIMAGE_BUILD_FLAGS -DFREEIMAGE_LIB)
ELSE(FREEIMAGE_BUILD_STATIC)
	SET(FREEIMAGE_LIBRARIES FreeImage)
	SET(FREEIMAGE_BUILD_DLL ON)
ENDIF(FREEIMAGE_BUILD_STATIC)

SET(FREEIMAGE_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/Source)
SET(FREEIMAGE_LIBRARY_DIRS ${CMAKE_BINARY_DIR}/Lib)

add_subdirectory(Source)
